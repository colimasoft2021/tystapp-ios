//
//  ReceiptsInteractor.swift
//  Tyst
//
//  Created by hb on 06/11/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ReceiptsBusinessLogic {
    func callStateAPI()
    func getCategory()
    func addReceipt(request: Receipts.Request)
}

protocol ReceiptsDataStore {
    
}

class ReceiptsInteractor: ReceiptsBusinessLogic, ReceiptsDataStore {
    var presenter: ReceiptsPresentationLogic?
    var worker: ReceiptsWorker?
    
    func callStateAPI() {
        worker = ReceiptsWorker()
        worker?.getStateListResponse(completionHandler: { (response, message, success) in
            self.presenter?.presentStateList(response: response, message: message ?? "", successCode: success ?? "0")
        })
    }
    
    func getCategory() {
        worker = ReceiptsWorker()
        worker?.getCategoryResponse(completionHandler: { (response, message, success) in
            self.presenter?.presentCategoryResponse(response: response, message: message ?? "", success: success ?? "0")
        })
    }
    
    func addReceipt(request: Receipts.Request) {
        worker = ReceiptsWorker()
        worker?.addCashData(request: request, completionHandler: { (message, success) in
            self.presenter?.presentAddReceiptResponse(message: message ?? "", success: success ?? "0")
        })
    }
}
