//
//  ReceiptsViewController.swift
//  Tyst
//
//  Created by hb on 06/11/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GooglePlaces
import GoogleSignIn

protocol ReceiptsDisplayLogic: class {
    func didReceiveStateListResponse(response: [StateList.ViewModel]?, message: String, successCode: String)
    func didReceiveCategoryResponse(response: [CategoryList.ViewModel]?, message: String, success: String)
    func didReceiveAddReceiptResponse(message: String, success: String)
}

class ReceiptsViewController: BaseViewControllerWithAd {
    
    //MARK: IBOutlet Constant
    var interactor: ReceiptsBusinessLogic?
    var router: (NSObjectProtocol & ReceiptsRoutingLogic & ReceiptsDataPassing)?
    
    @IBOutlet weak var txtFieldStoreName: UITextField!
    @IBOutlet weak var txtFieldTaxApplied: CustomTextField!
    @IBOutlet weak var txtFieldTotalAmount: CustomTextField!
    @IBOutlet weak var txtFieldDate: CustomTextField!
    @IBOutlet weak var txtFieldCategory: CustomTextField!
    @IBOutlet weak var txtFieldZip: CustomTextField!
    @IBOutlet weak var txtFieldCity: CustomTextField!
    @IBOutlet weak var txtFieldState: CustomTextField!
    @IBOutlet weak var txtFieldPlace: CustomTextField!
    @IBOutlet weak var viewAd: UIView!
    @IBOutlet weak var clctnView: UICollectionView!
    
    var selectedDate = ""
    var uploadedFile: Data?
    var pickedImageName = ""
    var fileType = ""
    
    var latitude = ""
    var longitude = ""
    
    var stateListData = [StateList.ViewModel]()
    var category = [CategoryList.ViewModel]()
    var dtPicker = UIDatePicker()
    var pickerView = UIPickerView()
    var stateId = ""
    
    var isStatePicker = true
    
    let formatter = NumberFormatter()
    
    var imageArray = [UIImage]() {
        didSet {
            clctnView.reloadData()
            self.scrollToBottom()
        }
    }
    
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = ReceiptsInteractor()
        let presenter = ReceiptsPresenter()
        let router = ReceiptsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    /// Method is called when view loads
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpLayout()
    }
    
    /// Method is called when view will appears
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        //self.viewAd.isHidden = (UserDefaultsManager.getLoggedUserDetails()?.userInfo?[0].purchaseStatus?.booleanStatus() ?? false)
    }
    
    /// Method is called when view did appear
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        //self.setAddMobView(viewAdd: self.viewAd)
        self.addBorder(textField: self.txtFieldStoreName)
        self.addBorder(textField: self.txtFieldPlace)
        self.addBorder(textField: self.txtFieldCity)
        self.addBorder(textField: self.txtFieldState)
        self.addBorder(textField: self.txtFieldZip)
        self.addBorder(textField: self.txtFieldCategory)
        self.addBorder(textField: self.txtFieldDate)
        self.addBorder(textField: self.txtFieldTotalAmount)
        self.addBorder(textField: self.txtFieldTaxApplied)
        self.addRightView(textField: self.txtFieldPlace)
        self.addRightView(textField: self.txtFieldCategory)
        
    }
    
    // MARK: Class Methods
    // SetUpLayout initial
    func setUpLayout() {
        self.addAnayltics(analyticsParameterItemID: "id-addreceiptscreen", analyticsParameterItemName: "click_addreceiptscreen", analyticsParameterContentType: "click_addreceiptscreen")
        self.title = AlertMessage.receiptsTitle
        self.interactor?.getCategory()
        dtPicker.datePickerMode = .date
        dtPicker.maximumDate = Date()
        dtPicker.addTarget(self, action: #selector(pickDate), for: UIControl.Event.valueChanged)
        txtFieldDate.inputView = dtPicker
        pickerView.delegate = self
        pickerView.dataSource = self
        self.txtFieldState.inputView = pickerView
        self.txtFieldState.keyboardToolbar.doneBarButton.setTarget(self, action: #selector(doneButtonClicked))
        self.txtFieldCategory.inputView = pickerView
        self.txtFieldCategory.keyboardToolbar.doneBarButton.setTarget(self, action: #selector(doneButtonClicked))
        formatter.numberStyle = .currency
        formatter.locale = Locale(identifier: "es_US")
        formatter.currencyCode = "USD"
        self.txtFieldTotalAmount.addTarget(self, action: #selector(self.amountChanged(_:)), for: .editingChanged)
        self.txtFieldTaxApplied.addTarget(self, action: #selector(self.amountChanged(_:)), for: .editingChanged)
    }
    
    /// Scroll colllecttionview to last index while add image
    func scrollToBottom() {
        DispatchQueue.main.async {
            if self.imageArray.count == 3 {
                let indexPath = IndexPath(row: self.imageArray.count - 1, section: 0)
                self.clctnView.scrollToItem(at: indexPath, at: .right, animated: false)
            } else {
                let indexPath = IndexPath(row: self.imageArray.count, section: 0)
                self.clctnView.scrollToItem(at: indexPath, at: .right, animated: false)
            }
        }
    }
    
    /// Open camera/gallery
    func addPhoto() {
        CustomImagePicker.shared.openImagePickerWith(mediaType: .MediaTypeImage, allowsEditing: false, actionSheetTitle: AppInfo.kAppName, message: "", cancelButtonTitle: "Cancel", cameraButtonTitle: "Camera", galleryButtonTitle: "Gallery") { (_, success, dict) in
            if success {
                if let img = (dict!["image"] as? UIImage) {
                    self.imageArray.append(img)
                }
            }
        }
    }
    
    /// Method used for add left view on textfield
    /// - Parameter textField: textField
    func addLeftView(textField: UITextField) {
        let label = UILabel(frame: CGRect(x: 0, y: 0, width: 15, height: 15))
        label.text = "$"
        textField.leftViewMode = .always
        textField.leftView = label
    }
    
    //MARK: IBAction
    @objc func amountChanged(_ txtfield : UITextField) {
        if txtfield == self.txtFieldTotalAmount {
            let aStr = txtfield.text?.components(separatedBy: "$").last?.replacingOccurrences(of: ",", with: "")
            let temp = Double(aStr ?? "0")
            txtfield.text = formatter.string(from: NSNumber(value: temp ?? 0))?.replacingOccurrences(of: ".00", with: "")
        }
        if txtfield == self.txtFieldTaxApplied {
            let aStr = txtfield.text?.components(separatedBy: "$").last?.replacingOccurrences(of: ",", with: "")
            let temp = Double(aStr ?? "0")
            txtfield.text = formatter.string(from: NSNumber(value: temp ?? 0))?.replacingOccurrences(of: ".00", with: "")
        }
    }
    
    /// State picker done button tap action
    ///
    /// - Parameter sender: UIbutton
    @objc func doneButtonClicked(_ sender: Any) {
        if isStatePicker {
            if stateListData.count > 0 {
                let aValue = self.stateListData[self.pickerView.selectedRow(inComponent: 0)]
                self.txtFieldState.text = aValue.state ?? ""
                self.stateId = aValue.stateId ?? ""
            }
        } else {
            if category.count > 0 {
                let aValue = self.category[self.pickerView.selectedRow(inComponent: 0)].category ?? ""
                self.txtFieldCategory.text = aValue
            }
        }
    }
    
    /// DatePickerDate
    @objc func pickDate() {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy/MM/dd"
        selectedDate = dateFormatter.string(from: dtPicker.date)
        dateFormatter.dateFormat = "MMM dd, yyyy"
        txtFieldDate.text = dateFormatter.string(from: dtPicker.date)
    }
    
    /// Check detail address
    ///
    /// - Parameter addressComponent: GMSAddressComponent
    func setSearchDetailsAddress(addressComponent: [GMSAddressComponent]) {
        var streetArray = [String]()
        for address in addressComponent {
            var addressStr = "\(address)"
            addressStr = addressStr.replacingOccurrences(of: "Types:", with: "")
            let addressArr = addressStr.components(separatedBy: ":")
            if addressStr.contains("street_number, Name") {
                streetArray.append(contentsOf: addressArr)
            } else if addressStr.contains("route, Name") {
                streetArray.append(contentsOf: addressArr)
                self.setAddress(addressArr: streetArray, textField: self.txtFieldPlace)
            } else if addressStr.contains("locality, political, Name") {
                self.setAddress(addressArr: addressArr, textField: self.txtFieldCity)
            } else if addressStr.contains("administrative_area_level_1") {
                self.setAddress(addressArr: addressArr, textField: self.txtFieldState)
                self.stateId = ""
            } else if addressStr.contains("postal_code") &&  !addressStr.contains("postal_code_suffix") {
                self.setAddress(addressArr: addressArr, textField: self.txtFieldZip)
            }
        }
        
        if txtFieldState.text != "" {
            let stateData = self.stateListData.filter {$0.state == self.txtFieldState.text}
            if stateData.count > 0 {
                self.stateId = stateData[0].stateId ?? ""
                
            }
        }
    }
    
    /// Set address to text fields
    ///
    /// - Parameters:
    ///   - addressArr: [String]
    ///   - textField: UITextField
    func setAddress(addressArr: [String], textField: UITextField) {
        if addressArr.count > 0 {
            if addressArr.count > 3 {
                var string = ""
                if addressArr[1].components(separatedBy: ",").count > 0 {
                    string.append(contentsOf: (addressArr[1].components(separatedBy: ",")[0]).trimmingCharacters(in: .whitespaces))
                    string.append(contentsOf: " ")
                    string.append(contentsOf: (addressArr[4].components(separatedBy: ",")[0]).trimmingCharacters(in: .whitespaces))
                }
                textField.text = string
            } else {
                if addressArr[1].components(separatedBy: ",").count > 0 {
                    textField.text = (addressArr[1].components(separatedBy: ",")[0]).trimmingCharacters(in: .whitespaces)
                }
            }
        }
    }
    
    func clearAll() {
        self.txtFieldStoreName.text = ""
        self.txtFieldPlace.text = ""
        self.latitude = ""
        self.longitude = ""
        self.stateId = ""
        self.txtFieldCity.text = ""
        self.txtFieldState.text = ""
        self.txtFieldZip.text = ""
        self.txtFieldCategory.text = ""
        self.txtFieldDate.text = ""
        self.txtFieldTotalAmount.text = ""
        self.txtFieldTaxApplied.text = ""
        self.imageArray.removeAll()
        self.pickedImageName = ""
        self.uploadedFile = nil
        self.fileType = ""
    }
    
    /// Validation of textfield and call api
    func validiateFields() {
        do {
            _ = try txtFieldStoreName.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requireStore))
            _ = try txtFieldPlace.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requirestreetAddress))
            _ = try txtFieldCity.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requirecity))
            _ = try txtFieldState.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requirestate))
            _ = try txtFieldZip.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requirezip))
            _ = try txtFieldZip.validatedText(validationType: ValidatorType.zipcode)
            _ = try txtFieldCategory.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.category))
            _ = try txtFieldDate.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.date))
            _ = try txtFieldTotalAmount.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.amount))
            
            var tax = txtFieldTaxApplied.text?.components(separatedBy: "$").last?.replacingOccurrences(of: ",", with: "")
            let total = txtFieldTotalAmount.text?.components(separatedBy: "$").last?.replacingOccurrences(of: ",", with: "")
            
            if tax == "" {
                tax = "0.0"
            }
            
            if total == "0" {
                self.showTopMessage(message: AlertMessage.amount, type: .Error)
            }else if (Int(tax ?? "") ?? 0 >= Int(total ?? "") ?? 0)  {
                self.showTopMessage(message: AlertMessage.taxGreaterAmount, type: .Error)
            }
            else if (((Float(total ?? "0")!) * (Float(AppConstants.taxPercentage)!)) / 100.0) < (Float(tax ?? "0")!) {
                showTopMessage(message: "Tax percentage should not be more than \(AppConstants.taxPercentage)%", type: .Error)
            }
            else {
                callAddReceiptApi()
            }
            
        } catch(let error) {
            self.showTopMessage(message: (error as? ValidationError)?.message, type: .Error)
        }
    }
    
    /// call add receipt api
    func callAddReceiptApi() {
        let tax = txtFieldTaxApplied.text?.components(separatedBy: "$").last?.replacingOccurrences(of: ",", with: "")
        let total = txtFieldTotalAmount.text?.components(separatedBy: "$").last?.replacingOccurrences(of: ",", with: "")
        
        let request = Receipts.Request(category: txtFieldCategory.text ?? "", name: txtFieldStoreName.text ?? "", location: txtFieldPlace.text ?? "", stateId: self.stateId, zipCode: txtFieldZip.text ?? "", amount: total ?? "", date: self.selectedDate, tax: tax ?? "", lat: self.latitude, long: self.longitude, imageArray: self.imageArray, imageCount: "\(self.imageArray.count)")
        self.interactor?.addReceipt(request: request)
    }
    
    
    @IBAction func btnUploadReceiptAction(_ sender: UIButton) {
//        CustomImagePicker.shared.openImagePickerWith(mediaType: .MediaTypeImage, allowsEditing: false, actionSheetTitle: AppInfo.kAppName, message: "", cancelButtonTitle: "Cancel", cameraButtonTitle: "Camera", galleryButtonTitle: "Gallery") { (_, success, dict) in
//            if success {
//                if let img = (dict!["image"] as? UIImage) {
//                    self.uploadedFile = img.compressTo(0.5)
//                    self.fileType = "png"
//                    self.pickedImageName = "\(NSTimeIntervalSince1970).png"
//                    self.imgReceipts.image = img
//                    self.imgReceipts.contentMode = .scaleAspectFill
//                }
//            }
//        }
    }
    
    @IBAction func saveBtnAction(_ sender: UIBarButtonItem) {
        self.addAnayltics(analyticsParameterItemID: "id-addreceipt", analyticsParameterItemName: "click_addreceipt", analyticsParameterContentType: "click_addreceipt")
        self.validiateFields()
    }
    
    @IBAction func btnCancelAction(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
}

//MARK: TextField Method
extension ReceiptsViewController: UITextFieldDelegate {
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == txtFieldPlace {
            if let googleApi = GoogleSearch.instance() {
                googleApi.completion = {predictor, error in
                    guard error == nil else {return}
                    self.txtFieldPlace.text = ""
                    if let predictor = predictor {
                        let placeClient = GMSPlacesClient.shared()
                        placeClient.lookUpPlaceID(predictor.placeID) { (place, error) in
                            if error == nil {
                                self.txtFieldPlace.text = ""
                                self.txtFieldState.text = ""
                                self.txtFieldCity.text = ""
                                self.txtFieldZip.text = ""
                                self.stateId = ""
                                self.latitude = String(describing: (place?.coordinate.latitude)!)
                                self.longitude = String(describing: (place?.coordinate.longitude)!)
                                self.setSearchDetailsAddress(addressComponent: (place?.addressComponents)!)
                            }
                        }
                    }
                }
                googleApi.modalPresentationStyle = .fullScreen
                self.present(googleApi, animated: true, completion: nil)
            }
        } else if textField == txtFieldState {
            self.isStatePicker = true
        } else if textField == txtFieldCategory {
            self.isStatePicker = false
        }
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        if textField == txtFieldDate {
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "yyyy/MM/dd"
            selectedDate = dateFormatter.string(from: dtPicker.date)
            dateFormatter.dateFormat = "MMM dd, yyyy"
            txtFieldDate.text = dateFormatter.string(from: dtPicker.date)
        }
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        
        if textField == txtFieldCity {
            let maxLength = 50
            let currentString: NSString = textField.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
            if newString.length > maxLength {
                return newString.length <= maxLength
            }
        
        } else if textField == txtFieldZip {
            let maxLength = 5
            let currentString: NSString = textField.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
            if newString.length > maxLength {
                return newString.length <= maxLength
            }
           
        } else if textField == txtFieldTotalAmount, textField == txtFieldTaxApplied {
            let currentString: NSString = textField.text! as NSString
            let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
            if newString.contains(".") {
                if newString.length > 8 {
                    return newString.length <= 8
                }
            } else {
                if newString.length > 5 {
                    return newString.length <= 5
                }
            }
            
            let temp = Int(textField.text ?? "0")
            textField.text = formatter.string(from: NSNumber(value: temp ?? 0))
            
        }
        
        
       
        return true
    }
    
}

//MARK: UIPicker Method
extension ReceiptsViewController: UIPickerViewDataSource, UIPickerViewDelegate {
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return isStatePicker ? self.stateListData.count:self.category.count
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return isStatePicker ? (stateListData[row].state ?? ""):(self.category[row].category ?? "")
    }
}

//MARK: CollectionView Methods
extension ReceiptsViewController:  UICollectionViewDelegate, UICollectionViewDataSource {
    /// Method is called to get number of items to be displayed in collectionview
    ///
    /// - Parameters:
    ///   - collectionView: CollectionView
    ///   - section: Section
    /// - Returns: Return number of rows
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if imageArray.count == 3 {
            return imageArray.count
        } else {
            return imageArray.count + 1
        }
    }
    
    /// Method is called to get cell for row at particular index
    ///
    /// - Parameters:
    ///   - collectionView: Collectionview
    ///   - indexPath: Indexpath
    /// - Returns: Return cell for indexpath
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        if indexPath.row == imageArray.count {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "addReceiptImage", for: indexPath) as? ReceiptAddImageCollectionViewCell
            cell?.btnAddTappedClouser = {
                self.addPhoto()
            }
            return cell!
        } else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ReceiptCell", for: indexPath) as? ReceiptImageCollectionViewCell
            cell?.imgPicked.image = imageArray[indexPath.row]
            //cell?.imgPicked.contentMode = .scaleToFill
            cell?.btnRemoveTappedClouser = {
                self.displayAlert(msg: AlertMessage.deleteMessage, ok: "Yes", cancel: "No", okAction: {
                    self.imageArray.remove(at: indexPath.row)
                }, cancelAction: nil)
                
            }
            return cell!
        }
    }
}

//MARK: API Response
extension ReceiptsViewController: ReceiptsDisplayLogic {
    // State list response
    func didReceiveStateListResponse(response: [StateList.ViewModel]?, message: String, successCode: String) {
        if successCode == "1" {
            if let data = response {
                self.stateListData = data
            }
        }
    }
    
    func didReceiveCategoryResponse(response: [CategoryList.ViewModel]?, message: String, success: String) {
        if success == "1" {
            if let data = response {
                self.interactor?.callStateAPI()
                self.category = data
            }
        }
    }
    
    func didReceiveAddReceiptResponse(message: String, success: String) {
        if success == "1" {
            self.clearAll()
            showTopMessage(message: message, type: .Success)
            // NotificationCenter.default.post(name: NSNotification.Name("AddBank"), object: nil)
            NotificationCenter.default.post(name: NSNotification.Name("AddReceipt"), object: nil)
            self.dismiss(animated: true, completion: nil)
            WhiteLabelSessionHandler.shared.addCount = WhiteLabelSessionHandler.shared.addCount + 1
        } else {
            showTopMessage(message: message, type: .Error)
        }
    }
}

//MARK: Custom Protocol Reeipt
extension ReceiptsViewController {
    
    func addBorder(textField: UITextField) {
        let bottomLine = CALayer()
        bottomLine.frame =  CGRect(x: 0.0, y: textField.frame.height - 1, width: textField.frame.width, height: 1.0)
        bottomLine.backgroundColor = #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)
        textField.borderStyle = UITextField.BorderStyle.none
        textField.layer.addSublayer(bottomLine)
    }
    
    func addRightView(textField:UITextField) {
        let button = UIButton(type: .custom)
        button.setImage(UIImage(named: "drop"), for: .normal)
        button.imageEdgeInsets = UIEdgeInsets(top: 0, left: -10, bottom: 0, right: 0)
        button.frame = CGRect(x: 0, y: 0, width: 20, height: 20)
        textField.rightView = button
        textField.rightViewMode = .always
    }
}




