//
//  ChangePasswordViewController.swift
//  Udecide
//
//  Created by hb on 15/04/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// Protocol for presenting response
protocol ChangePasswordDisplayLogic: class {
    /// Did Receive response for change password
    ///
    /// - Parameters:
    ///   - message: API Message
    ///   - successCode: API Success
    func didReceivecChangePasswordResponse(message: String, success: String)
}

/// This class is used to change password of user account.
class ChangePasswordViewController: BaseViewController {
    
    @IBOutlet weak var txtFieldOldPassword: CustomTextField!
    @IBOutlet weak var txtFieldNewPassword: CustomTextField!
    @IBOutlet weak var txtFieldConfirmPassword: CustomTextField!
    @IBOutlet weak var btnupdatePassword: WLButton!
    
    /// Interactor for API Call
    var interactor: ChangePasswordBusinessLogic?
    
    /// Insatance
    ///
    /// - Returns: ChangePasswordViewController
    class func instance() -> ChangePasswordViewController? {
        return StoryBoard.ChangePassword.board.instantiateViewController(withIdentifier: AppClass.ChangePasswordVC.rawValue) as? ChangePasswordViewController
    }
    
    // MARK: Object lifecycle
    
     /// Override method to initialize with nib
    ///
    /// - Parameters:
    ///   - nibNameOrNil: Nib name
    ///   - nibBundleOrNil: Bundle in which nib is present
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
   /// Decoder
    ///
    /// - Parameter aDecoder: Decoder
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    /// Set Up For API Calls 
    private func setup() {
        let viewController = self
        let interactor = ChangePasswordInteractor()
        let presenter = ChangePasswordPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    /// Method is called when view loads
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
    }
    
     /// Method is called when view did appear
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.txtFieldOldPassword.becomeFirstResponder()
    }
    
    /// Setup Textfield and UI
    func setupLayout() {
        self.navigationItem.title = AlertMessage.changePasswordTitle
    }
    
    /// Validiate Fields and call api
    fileprivate func validiateFields() {
        guard self.internetAvailable() else {
            return
        }
        self.view.endEditing(true)
        do {
//            let oldPassword = try txtFieldOldPassword.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requirePassword))
//            let newPassword = try txtFieldNewPassword.validatedText(validationType: ValidatorType.password)
//            _ = try txtFieldConfirmPassword.validatedText(validationType: ValidatorType.confirmpassword(password: newPassword))
//
         
            var oldPassword = try txtFieldOldPassword.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requireOldPassword),
                                                               visibility: true, optional: false)
            var newPassword = try txtFieldNewPassword.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requireNewPassword),
                                                                     visibility: true, optional: false)
            _ = try txtFieldNewPassword.validatedText(validationType: ValidatorType.password(message: AlertMessage.invalidNewPassword), visibility: true, optional: false)
            _ = try txtFieldConfirmPassword.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requireConfirmPassword),
                                                          visibility: true, optional: false)
            _ = try txtFieldConfirmPassword.validatedText(validationType: ValidatorType.confirmpassword(password: txtFieldNewPassword.text ?? "", reqMessage: AlertMessage.requireConfirmPassword, equalMessage: AlertMessage.newConfirmPassword),
                                                          visibility: true, optional: false)
            
            
            oldPassword = AESCrypt.encrypt(oldPassword, password: AppConstants.aesEncryptionKey, isPreviewApp: false)
            newPassword = AESCrypt.encrypt(newPassword, password: AppConstants.aesEncryptionKey, isPreviewApp: false)
            
            let request = ChangePassword.Request(oldPassword: oldPassword, newPassword: newPassword)
            self.interactor?.changePassword(request: request)
            
        } catch(let error) {
            self.showTopMessage(message: (error as? ValidationError)?.message, type: .Error)
        }
        
    }
    
    /// Change password
    ///
    /// - Parameter sender: btnUpdate
    @IBAction func btnUpdateAction(_ sender: WLButton) {
        validiateFields()
    }
    
}

extension ChangePasswordViewController: ChangePasswordDisplayLogic {
    /// Did Receive response for change password
    ///
    /// - Parameters:
    ///   - message: API Message
    ///   - successCode: API Success
    func didReceivecChangePasswordResponse(message: String, success: String) {
        if success == "1" {
            self.showTopMessage(message: message, type: .Success)
            self.navigationController?.popViewController(animated: true)
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
}
