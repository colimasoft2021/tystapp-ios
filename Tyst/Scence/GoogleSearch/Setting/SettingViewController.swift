//
//  SettingViewController.swift
//  WhiteLabelApp
//
//  Created by hb on 23/09/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects

import UIKit
import SwiftyStoreKit
//import StoreKit

//import HBLogger
/// Protocol for presenting response
protocol SettingDisplayLogic: class {
    /// Did Receive Logout Response
    ///
    /// - Parameters:
    ///   - Response: API Response
    ///   - message: API Message
    ///   - successCode: API Success
    func logout(message: String, Success: String)
    /// Did Receive Delete account Response
    ///
    /// - Parameters:
    ///   - Response: API Response
    ///   - message: API Message
    ///   - successCode: API Success
    func deleteAccount(message: String, Success: String)
    /// Did Receive update push notification setting Response
    ///
    /// - Parameters:
    ///   - Response: API Response
    ///   - message: API Message
    ///   - successCode: API Success
    func updatePushNotification(message: String, Success: String)
    /// Did Receive Go Ad Free Response
    ///
    /// - Parameters:
    ///   - Response: API Response
    ///   - message: API Message
    ///   - successCode: API Success
    func didReceiveGoAddFree(message: String, success: String)
}

/// This class is used for displaying all settings options: account settings and support options.
class SettingViewController: BaseViewControllerWithAd {
    /// Interactor for API Call
    var interactor: SettingBusinessLogic?
    /// Router for navigation between the screens
    var router: (NSObjectProtocol & SettingRoutingLogic & SettingDataPassing)?
    
    @IBOutlet weak var viewblank: UIView!
    @IBOutlet weak var viewAccountSetting: UIView!
    @IBOutlet weak var btnLogout: WLButton!
    @IBOutlet weak var viewLogout: UIView!
    @IBOutlet weak var btnGoAdFree: WLButton!
    @IBOutlet weak var btnEditProfile: WLButton!
    @IBOutlet weak var viewEdit: UIView!
    @IBOutlet weak var lblVersionNumber: UILabel!
    @IBOutlet weak var btnSwitch: UISwitch!
    @IBOutlet weak var btnSendFeedback: WLButton!
    @IBOutlet weak var btnChangePassword: WLButton!
    @IBOutlet weak var btnAboutUs: WLButton!
    @IBOutlet weak var btnPrivacyPolicy: WLButton!
    @IBOutlet weak var btnTermsCondition: WLButton!
    @IBOutlet weak var btnEula: WLButton!
    @IBOutlet weak var btnShareApp: WLButton!
    @IBOutlet weak var btnDeleteAccount: WLButton!
    /// Button For Logs
    @IBOutlet weak var btnLogs: WLButton!
    @IBOutlet weak var viewNotification: UIView!
    @IBOutlet weak var viewDeleteAccount: UIView!
    @IBOutlet weak var viewShareApp: UIView!
    @IBOutlet weak var viewSendFeedback: UIView!
    @IBOutlet weak var viewTermsCondition: UIView!
    @IBOutlet weak var viewPrivacyPolicy: UIView!
    @IBOutlet weak var viewAboutUJs: UIView!
    @IBOutlet weak var viewAddFree: UIView!
    @IBOutlet weak var viewChangePassword: UIView!
    /// View For Logs
    @IBOutlet weak var viewLogs: UIView!
    
    var dtFormatter = DateFormatter()
    var notificationOn = UserDefaultsManager.notificationEnable
    // MARK: Object lifecycle
    
     /// Override method to initialize with nib
    ///
    /// - Parameters:
    ///   - nibNameOrNil: Nib name
    ///   - nibBundleOrNil: Bundle in which nib is present
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
   /// Decoder
    ///
    /// - Parameter aDecoder: Decoder
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Class Instance
    class func instance() -> SettingViewController? {
        return StoryBoard.Setting.board.instantiateViewController(withIdentifier: AppClass.SettingVC.rawValue) as? SettingViewController
    }
    // MARK: Setup
    
    /// Set Up For API Calls 
    private func setup() {
        let viewController = self
        let interactor = SettingInteractor()
        let presenter = SettingPresenter()
        let router = SettingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    // MARK: View lifecycle
    
    /// Method is called when view loads
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpUI()
    }
    
    /// Method is called when view did appears
    ///
    /// - Parameter animated: animated
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.viewAddFree.isHidden = (UserDefaultsManager.getLoggedUserDetails()?.userInfo?[0].purchaseStatus?.booleanStatus() ?? false)
    }
    
    /// Set up UI
    func setUpUI() {
        self.navigationItem.title = AlertMessage.SettingTitle
        lblVersionNumber.text = "Version - \(AppInfo.kAppVersion)"
        
        setSettingOptions()

        if !AppConstants.isLoginSkipped {
          
            if let socialLoginId = UserDefaultsManager.getLoggedUserDetails()?.userInfo?[0].socialLoginId, socialLoginId != "" {
                self.viewChangePassword.isHidden = true
            } else {
                self.viewChangePassword.isHidden = false
            }
        }
        
        self.viewAddFree.isHidden = (UserDefaultsManager.getLoggedUserDetails()?.userInfo?[0].purchaseStatus?.booleanStatus() ?? false)
        
        
        
    }
    
    /// Set setting options for guest user or login user
    func setSettingOptions() {
        self.viewChangePassword.isHidden = AppConstants.isLoginSkipped
        self.viewDeleteAccount.isHidden = AppConstants.isLoginSkipped
        self.viewSendFeedback.isHidden = AppConstants.isLoginSkipped
        self.viewLogout.isHidden = AppConstants.isLoginSkipped
        viewAccountSetting.isHidden = AppConstants.isLoginSkipped
        viewblank.isHidden = AppConstants.isLoginSkipped
        if UserDefaultsManager.getLoggedUserDetails()?.userInfo?[0].pushNotification == "Yes" {
            btnSwitch.isOn = true
        } else {
            btnSwitch.isOn = false
        }
    }
    
    /// Share Application
    func showSharePicker() {
        let atext = AlertMessage.shareApp
        let activityVC = UIActivityViewController(activityItems: [atext], applicationActivities: nil)
        activityVC.setValue("Download \(AppInfo.kAppName)", forKey: "subject")
        present(activityVC, animated: true, completion: nil)
    }
    
    // MARK: In App Purchase for Go Ad Free
    
    /// In app Purchase for Go Ad Free
    ///
    /// - Parameter identifier: Purchase Identifer
    func buyProduct(withIdentifier identifier: String) {
        GlobalUtility.showHud()
        print("Asked:\(AppInfo.kBundleIdentifier! + "." + identifier)")
        
        SwiftyStoreKit.purchaseProduct((AppInfo.kBundleIdentifier! + "." + identifier), atomically: true) { result in
            GlobalUtility.hideHud()
            
            if case .success(let purchase) = result {
                SwiftyStoreKit.finishTransaction(purchase.transaction)
                self.purchaseSuccess(purchase.productId)
                // Deliver content from server, then:
                if purchase.needsFinishTransaction {
                    SwiftyStoreKit.finishTransaction(purchase.transaction)
                    self.purchaseSuccess(AppInfo.kBundleIdentifier! + "." + identifier)
                }
            }
        }
    }
    
    /// Restore In app Purchase
    ///
    /// - Parameter identifier: purchase identifier
    func restoreProduct(withIdentifier identifier:String) {
        GlobalUtility.showHud()
        SwiftyStoreKit.restorePurchases(atomically: true) { results in
        GlobalUtility.hideHud()
            
            var isPurchased = false
            for purchase in results.restoredPurchases {
                //  let downloads = purchase.transaction.downloads
                if purchase.productId == (AppInfo.kBundleIdentifier! + "." + identifier) {
                    isPurchased = true
                    //self.showTopMessage(message: AlertMessage.subscriptionSuccess, type: .Success)
                    SwiftyStoreKit.finishTransaction(purchase.transaction)
                    self.purchaseSuccess(AppInfo.kBundleIdentifier! + "." + identifier)
                }
            }
            
            if !isPurchased {
                self.displayAlert(msg: AlertMessage.restoreFail, ok: AlertMessage.yes, cancel: AlertMessage.no, okAction: {
                    self.buyProduct(withIdentifier: identifier)
                }, cancelAction: {
                    
                })
            }
        }
    }
    
    /// In app Purchase Success
    ///
    /// - Parameter identifier: Purchase Identifier
    func purchaseSuccess(_ identifier : String) {
       
        self.receiptDataVerification()
    }
    
    /// Receipt Verification
    func receiptDataVerification() {
        if !self.internetAvailable() {
            self.showTopMessage(message: AlertMessage.NetworkError, type: .Error)
            return
        }
        
        GlobalUtility.showHud()
        verifyReceipt { (result) in
            GlobalUtility.hideHud()
            
            switch result {
            case .success(let receipt):
                print(receipt.description)
                let req = GoAddFree.Request(oneTimeTransactionData: receipt.description)
                self.interactor?.goAddFree(request: req)
            case .error:
                break
            }
        }
    }
    
    /// Verify Receipt from Apple
    ///
    /// - Parameter completion: Description
    func verifyReceipt(completion: @escaping (VerifyReceiptResult) -> Void) {
        let appleValidator = AppleReceiptValidator(service: .sandbox, sharedSecret: AppConstants.appSharedSecret)
        SwiftyStoreKit.verifyReceipt(using: appleValidator, completion: completion)
    }
    
    // Mark : WLButton Actions
    
    /// Notification On/Off Action
    ///
    /// - Parameter sender: UISwitch
    @IBAction func notificationTapAction(_ sender: UISwitch) {
        UserDefaultsManager.notificationEnable = (btnSwitch.isOn ? "Yes" : "No")
        let req = UpdatePushNotificationSetting.Request(notification: UserDefaultsManager.notificationEnable)
        self.interactor?.updatePushNotification(request: req)
    }
    
    /// Setting Option tap Actions
    ///
    /// - Parameter sender: WLButton
    @IBAction func btnSettingOptionAction(_ sender: WLButton) {
        switch sender {
        case btnGoAdFree:
//            guard internetAvailable() else { return }
//            self.goAdFree()
//

            if let VC = SubscriptionViewController.instance() {
                self.navigationController?.pushViewController(VC, animated: true)
            }
            
        case btnEditProfile:
            if let editProfileVC = EditProfileViewController.instance() {
                self.navigationController?.pushViewController(editProfileVC, animated: true)
            }
        case btnChangePassword:
            if let changePassword = ChangePasswordViewController.instance() {
                self.navigationController?.pushViewController(changePassword, animated: true)
            }
        
        case btnDeleteAccount:
            guard internetAvailable() else { return }
            self.displayAlert(msg: AlertMessage.deleteAccountAlert, ok: AlertMessage.yes, cancel: AlertMessage.no, okAction: {
                self.interactor?.deleteAccount()
            }, cancelAction: nil)
            
        case btnAboutUs:
            if let staticPageVC = StaticPageViewController.instance() {
                staticPageVC.isFrom = StaticPageCode.aboutUs.rawValue
                self.navigationController?.pushViewController(staticPageVC, animated: true)
            }
        case btnPrivacyPolicy:
            if let staticPageVC = StaticPageViewController.instance() {
                staticPageVC.isFrom = StaticPageCode.privacyPolicy.rawValue
                self.navigationController?.pushViewController(staticPageVC, animated: true)
            }
        case btnTermsCondition:
            if let staticPageVC = StaticPageViewController.instance() {
                staticPageVC.isFrom = StaticPageCode.termsCondition.rawValue
                self.navigationController?.pushViewController(staticPageVC, animated: true)
            }
            case btnEula:
            if let staticPageVC = StaticPageViewController.instance() {
                staticPageVC.isFrom = StaticPageCode.eula.rawValue
                self.navigationController?.pushViewController(staticPageVC, animated: true)
            }
        case btnSendFeedback:
            if let sendFeedbackVC = SendFeedbackViewController.instance() {
                self.navigationController?.pushViewController(sendFeedbackVC, animated: true)
            }
        case btnShareApp:
            self.showSharePicker()
            
        case btnLogs:
            break
         // HBLogger.shared.ShowLogs()
        default:
            break
        }
    }
    
    /// DO IAP to go ad free
    func goAdFree() {
        let alertController = UIAlertController(title:  AppInfo.kAppName, message: AlertMessage.purchaseAlert, preferredStyle: .alert)
        
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel) { (_) in
            
        }
        
        alertController.addAction(cancelAction)
        
        let OKAction = UIAlertAction(title: "Buy for $0.99", style: .default) { (_) in
            if Platform.isSimulator {
                let aModel = UserDefaultsManager.getLoggedUserDetails()
                aModel?.userInfo?[0].purchaseStatus = "Yes"
                UserDefaultsManager.setLoggedUserDetails(userDetail: aModel!)
                self.viewAddFree.isHidden = true
                self.showTopMessage(message: "Ads are removed successfully.", type: .Success)
            } else {
                self.buyProduct(withIdentifier: AppConstants.subscriptionId)
            }
        }
        alertController.addAction(OKAction)
        
        let RestoreAction = UIAlertAction(title: "Restore your Purchase", style: .default) { (_) in
            self.restoreProduct(withIdentifier: AppConstants.subscriptionId)
        }
        
        alertController.addAction(RestoreAction)
        
        self.present(alertController, animated: true, completion: nil)
    }
    
    /// Logout
    ///
    /// - Parameter sender: WLButton
    @IBAction func btnLogoutTapAction(_ sender: WLButton) {
        guard internetAvailable() else { return }
        self.displayAlert(msg: AlertMessage.logOutAlert, ok: AlertMessage.yes, cancel: AlertMessage.no, okAction: {
            self.interactor?.logout()
        }, cancelAction: nil)
    }
    
    @IBAction func btnTutorialAction(_ sender: Any) {
        if let VC = WelcomeViewController.instance() {
            VC.isfrom = "Setting"
            self.navigationController?.pushViewController(VC, animated: true)
        }
    }
    
}

extension SettingViewController: SettingDisplayLogic {
    /// Did Receive Logout Response
    ///
    /// - Parameters:
    ///   - Response: API Response
    ///   - message: API Message
    ///   - successCode: API Success
    func logout(message: String, Success: String) {
        if Success == "1" {
            self.router?.redirectToLogin()
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
    
     /// Did Receive Delete account Response
    ///
    /// - Parameters:
    ///   - Response: API Response
    ///   - message: API Message
    ///   - successCode: API Success
    
    func updatePushNotification(message: String, Success: String) {
        if Success == "1" {
            let loginDetails = UserDefaultsManager.getLoggedUserDetails()
            let temp = loginDetails?.userInfo?[0].pushNotification
            if temp == "Yes" {
               loginDetails?.userInfo?[0].pushNotification = "No"
            } else {
                loginDetails?.userInfo?[0].pushNotification = "Yes"
            }
            UserDefaultsManager.setLoggedUserDetails(userDetail: loginDetails!)
            self.showTopMessage(message: message, type: .Success)
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
    
    /// Did Receive update push notification setting Response
    ///
    /// - Parameters:
    ///   - Response: API Response
    ///   - message: API Message
    ///   - successCode: API Success
    func didReceiveGoAddFree(message: String, success: String) {
        if success == "1" {
            let aModel = UserDefaultsManager.getLoggedUserDetails()
            aModel?.userInfo?[0].purchaseStatus = "Yes"
            UserDefaultsManager.setLoggedUserDetails(userDetail: aModel!)
            self.viewAddFree.isHidden = true
            self.showTopMessage(message: message, type: .Success)
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
    /// Did Receive Go Ad Free Response
    ///
    /// - Parameters:
    ///   - Response: API Response
    ///   - message: API Message
    ///   - successCode: API Success
    func deleteAccount(message: String, Success: String) {
        if Success == "1" {
            self.router?.redirectToLogin()
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
}
