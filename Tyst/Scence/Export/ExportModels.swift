//
//  ExportModels.swift
//  Tyst
//
//  Created by hb on 06/11/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Export {
    /// Reponse Class
    class ViewModel: WSResponseData {
        var startDate: String?
        var endDate: String?
        var totalTransactionAmount: String?
        var totalTaxAmount: String?
        var logFile: String?
        var addedAt: String?
        var status: String?
        
        enum CodingKeys: String, CodingKey {
            case start_date
            case end_date
            case total_transaction_amount
            case total_tax_amount
            case log_file
            case added_at
            case status
        }
        
        /// Init default method
        ///
        /// - Parameter decoder: Decoder
        /// - Throws: throws exception if found error
        required init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            startDate = try values.decodeIfPresent(String.self, forKey: .start_date)
            endDate = try values.decodeIfPresent(String.self, forKey: .end_date)
            totalTransactionAmount = try values.decodeIfPresent(String.self, forKey: .total_transaction_amount)
            totalTaxAmount = try values.decodeIfPresent(String.self, forKey: .total_tax_amount)
            logFile = try values.decodeIfPresent(String.self, forKey: .log_file)
            addedAt = try values.decodeIfPresent(String.self, forKey: .added_at)
            status = try values.decodeIfPresent(String.self, forKey: .status)
        }
        
        /// Default encode method
        ///
        /// - Parameter encoder: Encoder
        /// - Throws:throws exception if found error
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(startDate, forKey: .start_date)
            try container.encode(endDate, forKey: .end_date)
            try container.encode(totalTransactionAmount, forKey: .total_transaction_amount)
            try container.encode(totalTaxAmount, forKey: .total_tax_amount)
            try container.encode(logFile, forKey: .log_file)
            try container.encode(addedAt, forKey: .added_at)
            try container.encode(status, forKey: .status)
        }
    }
}


enum CreateLogs {
    struct Request {
        var startDate: String
        var endDate: String
    }
    class ViewModel: WSResponseData {
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
        }
        required public init(from decoder: Decoder) throws {
            try super.init(from: decoder)
        }
    }
}
