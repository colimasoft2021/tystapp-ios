//
//  MyProfileInteractor.swift
//  WhiteLabelApp
//
//  Created by hb on 25/09/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// Protocol for My profile API
protocol MyProfileBusinessLogic {
    func addAccount(request: AddBankAccount.Request)
    func removeAccount(request: RemoveAccount.Request)
    func userInstitution(loader: Bool)
    func fetchTrnasaction(request: FetchTransaction.Request)
}

/// Data Store for MY Profile API
protocol MyProfileDataStore {
    
}

/// Class for My Profile Interactor API
class MyProfileInteractor: MyProfileBusinessLogic, MyProfileDataStore {
    /// Presentor Instance
    var presenter: MyProfilePresentationLogic?
    /// Worked Instance
    var worker: MyProfileWorker?
    
    
    func addAccount(request: AddBankAccount.Request) {
        worker = MyProfileWorker()
        worker?.addBankAccount(request: request, completionHandler: { (response, message, success) in
            self.presenter?.presentAddAccountResponse(response: response, message: message ?? "", success: success ?? "")
        })
    }
    
    func removeAccount(request: RemoveAccount.Request) {
        worker = MyProfileWorker()
        worker?.removeBankAccount(request: request, completionHandler: { (message, success) in
            self.presenter?.presentRemoveAccountResponse(message: message ?? "", success: success ?? "")
        })
    }
    
    func userInstitution(loader: Bool) {
        worker = MyProfileWorker()
        worker?.userInstituions(loader: loader, completionHandler: { (response, message, success) in
            self.presenter?.presentUserInstituionsResponse(response: response, message: message ?? "", success: success ?? "")
        })
    }
    
    /// Call fetch transaction API
    ///
    /// - Parameter request: Login email Social Request
    func fetchTrnasaction(request: FetchTransaction.Request) {
        worker = MyProfileWorker()
        worker?.fetchTransactionDetail(request: request, completionHandler: { (message, success) in
            self.presenter?.presentFetchTransactionResponse(message: message ?? "", success: success ?? "")
        })
    }
    
}
