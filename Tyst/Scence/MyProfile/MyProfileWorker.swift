//
//  MyProfileWorker.swift
//  WhiteLabelApp
//
//  Created by hb on 25/09/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// Class for My profile info
class MyProfileWorker {
    /// API call for Add Account
    ///
    /// - Parameters:
    ///   - request: Request for API Params
    ///   - completionHandler: Completion handle for api call
    func addBankAccount(request: AddBankAccount.Request, completionHandler: @escaping (AddBankAccount.ViewModel?,_ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: PlaidAPIRouter.addBankAcoount(request: request)) { (responce: WSResponse<AddBankAccount.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let response = detail.arrayData, response.count > 0, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler(response.first , msg, detail.setting?.success)
                } else {
                    completionHandler(nil, detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(nil, AlertMessage.defaultError, "0")
            }
        }
    }
    
    
    /// API call for remove account
    ///
    /// - Parameters:
    ///   - request: Request for API Params
    ///   - completionHandler: Completion handle for api call
    func removeBankAccount(request: RemoveAccount.Request, completionHandler: @escaping (_ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: PlaidAPIRouter.removeBankAcoount(request: request)) { (responce: WSResponse<Setting.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let _ = detail.arrayData, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler(msg, detail.setting?.success)
                } else {
                    completionHandler(detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(AlertMessage.defaultError, "0")
            }
        }
    }
    
    func userInstituions (loader: Bool, completionHandler: @escaping ([AddBankAccount.ViewModel]?,_ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: MyProfileAPIRouter.userInstitutions(),showHud: loader) { (responce: WSResponse<AddBankAccount.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let response = detail.arrayData, response.count > 0, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler(response , msg, detail.setting?.success)
                } else {
                    completionHandler(nil, detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(nil, AlertMessage.defaultError, "0")
            }
        }
    }
    
    /// API call for transaction Detail
    ///
    /// - Parameters:
    ///   - request: Request for API Params
    ///   - completionHandler: Completion handle for api call
    func fetchTransactionDetail(request: FetchTransaction.Request, completionHandler: @escaping (_ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: PlaidAPIRouter.fetchTransactionDetail(request: request),showHud: false) { (responce: WSResponse<Setting.ViewModel>?, error: NetworkError?) in
            if let detail = responce {
                if let _ = detail.arrayData, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler(msg, detail.setting?.success)
                } else {
                    completionHandler(detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(AlertMessage.defaultError, "0")
            }
        }
    }
}
