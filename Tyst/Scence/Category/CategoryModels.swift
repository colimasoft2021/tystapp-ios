//
//  CategoryModels.swift
//  Tyst
//
//  Created by hb on 28/02/20.
//  Copyright (c) 2020 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Category {
    
    struct Request{
        var instId: String
    }
    /// Reponse Class
    class ViewModel: WSResponseData {
        var p_account_id : String?
        var institution_id : String?
        var account_id : String?
        var account_name : String?
        var account_subtype : String?
        var account_type : String?
        var balance_available : String?
        var balance_current : String?
        var balance_iso_currency_code : String?
        var balance_limit : String?
        var balance_unofficial_currency_code : String?
        var account_mask : String?
        var account_official_name: String?
        
        
        
        enum CodingKeys: String, CodingKey {
            case p_account_id = "p_account_id"
            case institution_id = "institution_id"
            case account_id = "account_id"
            case account_name = "account_name"
            case account_subtype = "account_subtype"
            case account_type = "account_type"
            case balance_available = "balance_available"
            case balance_current = "balance_current"
            case balance_iso_currency_code = "balance_iso_currency_code"
            case balance_limit = "balance_limit"
            case balance_unofficial_currency_code = "balance_unofficial_currency_code"
            case account_mask = "account_mask"
            case account_official_name = "account_official_name"
            
        }
        
        /// Init default method
        ///
        /// - Parameter decoder: Decoder
        /// - Throws: throws exception if found error
        required init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            p_account_id = try values.decodeIfPresent(String.self, forKey: .p_account_id)
            institution_id = try values.decodeIfPresent(String.self, forKey: .institution_id)
            account_id = try values.decodeIfPresent(String.self, forKey: .account_id)
            account_name = try values.decodeIfPresent(String.self, forKey: .account_name)
            account_subtype = try values.decodeIfPresent(String.self, forKey: .account_subtype)
            account_type = try values.decodeIfPresent(String.self, forKey: .account_type)
            balance_available = try values.decodeIfPresent(String.self, forKey: .balance_available)
            balance_current = try values.decodeIfPresent(String.self, forKey: .balance_current)
            balance_iso_currency_code = try values.decodeIfPresent(String.self, forKey: .balance_iso_currency_code)
            balance_limit = try values.decodeIfPresent(String.self, forKey: .balance_limit)
            balance_unofficial_currency_code = try values.decodeIfPresent(String.self, forKey: .balance_unofficial_currency_code)
            account_mask = try values.decodeIfPresent(String.self, forKey: .account_mask)
            account_official_name = try values.decodeIfPresent(String.self, forKey: .account_official_name)
            
        }
        
        /// Default encode method
        ///
        /// - Parameter encoder: Encoder
        /// - Throws:throws exception if found error
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(p_account_id, forKey: .p_account_id)
            try container.encode(institution_id, forKey: .institution_id)
            try container.encode(account_id, forKey: .account_id)
            try container.encode(account_name, forKey: .account_name)
            try container.encode(account_subtype, forKey: .account_subtype)
            try container.encode(account_type, forKey: .account_type)
            try container.encode(balance_available, forKey: .balance_available)
            try container.encode(balance_current, forKey: .balance_current)
            try container.encode(balance_iso_currency_code, forKey: .balance_iso_currency_code)
            try container.encode(balance_limit, forKey: .balance_limit)
            try container.encode(balance_unofficial_currency_code, forKey: .balance_unofficial_currency_code)
            try container.encode(account_mask, forKey: .account_mask)
            try container.encode(account_official_name, forKey: .account_official_name)
        }
        
    }
    
}
