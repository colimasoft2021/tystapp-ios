//
//  GenerateLogViewController.swift
//  Tyst
//
//  Created by hb on 08/11/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FSCalendar

protocol GenerateLogDisplayLogic: class {
    
}

class GenerateLogViewController: UIViewController {
    
    //MARK: IBOutlet Constants
    var interactor: GenerateLogBusinessLogic?
    var router: (NSObjectProtocol & GenerateLogRoutingLogic & GenerateLogDataPassing)?

    /// Insatance
    ///
    /// - Returns: GenerateLogViewController
    class func instance() -> GenerateLogViewController? {
        return StoryBoard.GenerateLog.board.instantiateViewController(withIdentifier: AppClass.GenerateLogVC.rawValue) as? GenerateLogViewController
    }
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = GenerateLogInteractor()
        let presenter = GenerateLogPresenter()
        let router = GenerateLogRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    //MARK: IBAction
    @IBAction func btndismiss(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
}

extension GenerateLogViewController: GenerateLogDisplayLogic {
    
}
